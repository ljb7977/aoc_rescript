// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

function read_from_file(filename) {
  return Fs.readFileSync(filename, "utf8").split("\n");
}

function parse_boards(_lines, result) {
  while(true) {
    var lines = _lines;
    if (lines.length === 0) {
      return result;
    }
    var board_lines = Belt_Array.map(Belt_Array.slice(lines, 1, 5), (function (line) {
            return Belt_Array.map(line.trim().split(/\s+/), (function (v) {
                          var number = Belt_Option.getExn(Belt_Int.fromString(Belt_Option.getExn(v)));
                          return {
                                  value: number,
                                  is_marked: false
                                };
                        }));
          }));
    result.push(board_lines);
    _lines = Belt_Array.sliceToEnd(lines, 6);
    continue ;
  };
}

var lines = Fs.readFileSync("day4_input.txt", "utf8").split("\n");

var draws = Belt_Array.map(Belt_Option.getExn(Caml_option.undefined_to_opt(lines.shift())).split(","), (function (v) {
        return Belt_Option.getExn(Belt_Int.fromString(v));
      }));

var boards = parse_boards(lines, []);

console.log(draws);

console.log(Caml_array.get(boards, 0));

function mark_board(board, number) {
  return Belt_Array.map(board, (function (line) {
                return Belt_Array.map(line, (function (param) {
                              var value = param.value;
                              if (value === number) {
                                return {
                                        value: value,
                                        is_marked: true
                                      };
                              } else {
                                return {
                                        value: value,
                                        is_marked: param.is_marked
                                      };
                              }
                            }));
              }));
}

function get_all_unmarked_numbers(board) {
  return Belt_Array.reduce(Belt_Array.keep(Belt_Array.concatMany(board), (function (param) {
                    return !param.is_marked;
                  })), 0, (function (acc, param) {
                return acc + param.value | 0;
              }));
}

function check_board(board) {
  var horizontal = Belt_Array.map(Belt_Array.makeBy(5, (function (i) {
              return i;
            })), (function (i) {
          return Belt_Array.map(Belt_Array.makeBy(5, (function (j) {
                            return j;
                          })), (function (j) {
                        return Caml_array.get(Caml_array.get(board, i), j);
                      }));
        }));
  var vertical = Belt_Array.map(Belt_Array.makeBy(5, (function (j) {
              return j;
            })), (function (j) {
          return Belt_Array.map(Belt_Array.makeBy(5, (function (i) {
                            return i;
                          })), (function (i) {
                        return Caml_array.get(Caml_array.get(board, i), j);
                      }));
        }));
  var diagonal1 = Belt_Array.map(Belt_Array.makeBy(5, (function (i) {
              return i;
            })), (function (i) {
          return Caml_array.get(Caml_array.get(board, i), i);
        }));
  var diagonal2 = Belt_Array.map(Belt_Array.makeBy(5, (function (i) {
              return i;
            })), (function (i) {
          return Caml_array.get(Caml_array.get(board, i), 4 - i | 0);
        }));
  var target_cells = Belt_Array.concat(Belt_Array.concat(Belt_Array.concat(horizontal, vertical), [diagonal1]), [diagonal2]);
  var is_bingo = Belt_Array.some(target_cells, (function (cells) {
          return Belt_Array.every(cells, (function (param) {
                        return param.is_marked;
                      }));
        }));
  if (is_bingo) {
    return get_all_unmarked_numbers(board);
  }
  
}

var No_Bingos = /* @__PURE__ */Caml_exceptions.create("Day4.No_Bingos");

var Too_Many_Answers = /* @__PURE__ */Caml_exceptions.create("Day4.Too_Many_Answers");

function step(_draws, _boards) {
  while(true) {
    var boards = _boards;
    var draws = _draws;
    if (draws.length !== 0) {
      var draw = Caml_array.get(draws, 0);
      var new_boards = Belt_Array.map(boards, (function(draw){
          return function (board) {
            return mark_board(board, draw);
          }
          }(draw)));
      var check_result = Belt_Array.keepMap(new_boards, check_board);
      var len = check_result.length;
      if (len !== 1) {
        if (len !== 0) {
          throw {
                RE_EXN_ID: Too_Many_Answers,
                Error: new Error()
              };
        }
        _boards = new_boards;
        _draws = Belt_Array.sliceToEnd(draws, 1);
        continue ;
      }
      var answer = check_result[0];
      return Math.imul(answer, draw);
    }
    throw {
          RE_EXN_ID: No_Bingos,
          Error: new Error()
        };
  };
}

console.log(step(draws, boards));

exports.read_from_file = read_from_file;
exports.parse_boards = parse_boards;
exports.lines = lines;
exports.draws = draws;
exports.boards = boards;
exports.mark_board = mark_board;
exports.get_all_unmarked_numbers = get_all_unmarked_numbers;
exports.check_board = check_board;
exports.No_Bingos = No_Bingos;
exports.Too_Many_Answers = Too_Many_Answers;
exports.step = step;
/* lines Not a pure module */
